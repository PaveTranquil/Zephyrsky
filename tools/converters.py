from typing import Iterable

from pymorphy2.shapes import restore_capitalization

from loader import morph


def degrees_to_side(deg: float) -> str:
    """
    –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É–≥–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º —Å–≤–µ—Ç–∞.

    :param deg: –í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö.
    :type deg: float
    :return: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≤–µ—Ä–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π',
             '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–∂–Ω—ã–π', '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '–∑–∞–ø–∞–¥–Ω—ã–π' –∏–ª–∏ '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'.
    :rtype: str
    """

    if 338 <= deg <= 360 or 0 <= deg <= 22:
        return '—Å–µ–≤–µ—Ä–Ω—ã–π'
    elif 22 <= deg <= 67:
        return '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 67 <= deg <= 112:
        return '–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 112 <= deg <= 157:
        return '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 157 <= deg <= 202:
        return '—é–∂–Ω—ã–π'
    elif 202 <= deg <= 247:
        return '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
    elif 247 <= deg <= 292:
        return '–∑–∞–ø–∞–¥–Ω—ã–π'
    elif 292 <= deg <= 337:
        return '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'


def weather_id_to_icon(id_: int) -> str:
    """
    –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É-—ç–º–æ–¥–∑–∏.

    :param id_: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ OpenWeatherMap.
    :type id_: int
    :return: –ò–∫–æ–Ω–∫–∞-—ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.
    :rtype: str
    """

    match id_ // 100:
        case 2:
            return '‚õàÔ∏è'
        case 3:
            return 'üå¶Ô∏è'
        case 5:
            return 'üåßÔ∏è'
        case 6:
            return 'üå®Ô∏è'
        case 7:
            match id_ % 100 // 10:
                case 3 | 5 | 6:
                    return 'üí®'
                case _:
                    return 'üå´Ô∏è'
    match id_ % 10:
        case 0:
            return '‚òÄÔ∏è'
        case 1:
            return 'üå§Ô∏è'
        case 2:
            return '‚õÖ'
        case 3:
            return 'üå•Ô∏è'
        case 4:
            return '‚òÅÔ∏è'


def inflect_city(text: str, required_grammemes: Iterable[str]) -> str:
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≥—Ä–∞–º–º–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ
    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω—ã, –∏ –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
    –≥—Ä–∞–º–º–µ–º —Å –ø–æ–º–æ—â—å—é pymorphy2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é
    pymorphy2.shapes.restore_capitalization(), –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞ –≤—ã—Ö–æ–¥.

    :param text: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    :type text: str
    :param required_grammemes: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≥—Ä–∞–º–º–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏.
    :type required_grammemes: Iterable[str]

    :return: –°–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞–º–º–µ–º–∞–º–∏.
    :rtype: str
    """

    tokens = text.split()
    inflected = [
        restore_capitalization(
            morph.parse(tok)[0].inflect(required_grammemes).word,
            tok
        )
        for tok in tokens
    ]
    return " ".join(inflected)
