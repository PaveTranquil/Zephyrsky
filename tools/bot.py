from contextlib import suppress
from datetime import datetime, timedelta
from random import choice

from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, InlineKeyboardButton as Button, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder as Board

from loader import ADMINS, bot, db, storage
from tools.api import get_weather
from tools.converters import inflect_city
from entities import FORECAST, SUN_DESC


class AdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π—Å—è –æ—Ç aiogram.filters.BaseFilter –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""

    async def __call__(self, resp: Message | CallbackQuery) -> bool:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

        :param resp: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ `Message` –∏–ª–∏ `CallbackQuery`.
        :type resp: Union[aiogram.types.Message, aiogram.types.CallbackQuery]

        :return: –ë—É–ª–µ–≤–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–≤—à–∏–π resp.
        :rtype: bool
        """
        return await (resp.chat.id if isinstance(resp, Message) else resp.message.chat.id) in ADMINS


async def set_state(ctx: FSMContext, state: State):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSMContext –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è
    —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

    :param ctx: –û–±—ä–µ–∫—Ç FSMContext.
    :type ctx: FSMContext
    :param state: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    :type state: State
    """

    await ctx.set_state(state)
    await db.set_state(ctx.key.chat_id, 'aiogram_state', str(state).split("'")[1])


async def delete_state(ctx: FSMContext):
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSMContext –∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    :param ctx: –û–±—ä–µ–∫—Ç FSMContext, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç–∏—Ç—å.
    :type ctx: FSMContext
    """

    await ctx.clear()
    for key in ['aiogram_state', 'main_msg_id', 'from', 'set_h', 'set_m']:
        try:
            await db.delete_state(ctx.key.chat_id, key)
        except (ValueError, KeyError):
            pass


async def restore_states():
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∞—è –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –ø–∞–¥–µ–Ω–∏–∏ —á–∞—Ç-–±–æ—Ç–∞ ‚Äî –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
    """

    users = await db.get_users()
    for user in users:
        if state := user.state.get('aiogram_state'):
            await storage.set_state(bot, StorageKey(bot.id, user.tg_id, user.tg_id), state)


async def notify_admins(text: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º `text` –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ `ADMINS`.
    –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç `TelegramBadRequest`, —Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∞–≤–ª—è–µ—Ç—Å—è –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    :type text: str
    """
    for admin in ADMINS:
        with suppress(TelegramBadRequest):
            await bot.send_message(admin, text)


async def get_greeting(uid: int, with_city: bool = True) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.

    :param uid: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –∑–∞–ø–∏—Å–∞–Ω.
    :type uid: int

    :return: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–æ—Ä–æ–¥–µ.
    :rtype: str
    """

    user = await db.get_user(uid)
    if (tz_shift := user.state.get('tz_shift')) is None:
        return choice(['–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç–∏–∫', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–•—ç–ª–ª–æ—É', '–•–∞–π', '–ô–æ—É', '–°–∞–ª—é—Ç']), ''
    local_time, city = (datetime.now() + timedelta(hours=tz_shift)).time(), user.state.get('city')

    if 5 <= local_time.hour <= 11:
        greet = choice(['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ', '–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞', '–£—Ç—Ä–µ—á–∫–æ', '–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ',
                       '–î–æ–±—Ä–µ–π—à–µ–µ —É—Ç—Ä–æ', '–î–æ–±—Ä–µ–π—à–µ–≥–æ —É—Ç—Ä–∞', '–î–æ–±—Ä–µ–π—à–µ–µ —É—Ç—Ä–µ—á–∫–æ', '–î–æ–±—Ä–µ–π—à–µ–≥–æ —É—Ç—Ä–µ—á–∫–∞'])
        icon = 'üåá'
    elif 12 <= local_time.hour <= 16:
        greet = choice(['–î–æ–±—Ä—ã–π –¥–µ–Ω—å', '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è', '–î–æ–±—Ä—ã–π –¥–µ–Ω—ë–∫', '–î–æ–±—Ä–æ–≥–æ –¥–µ–Ω—å–∫–∞', '–î–µ–Ω—å –¥–æ–±—Ä—ã–π',
                       '–î–æ–±—Ä–µ–π—à–∏–π –¥–µ–Ω—å', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –¥–Ω—è', '–î–æ–±—Ä–µ–π—à–∏–π –¥–µ–Ω—ë–∫', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –¥–µ–Ω—å–∫–∞'])
        icon = 'üèôÔ∏è'
    elif 17 <= local_time.hour <= 22:
        greet = choice(['–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞', '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä–æ–∫', '–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∫–∞', '–í–µ—á–µ—Ä –¥–æ–±—Ä—ã–π',
                       '–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –≤–µ—á–µ—Ä–∞', '–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä–æ–∫', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –≤–µ—á–µ—Ä–∫–∞'])
        icon = 'üåá'
    else:
        greet = choice(['–î–æ–±—Ä–æ–π –Ω–æ—á–∏', '–°–ø–æ–∫–æ–π–Ω–∞—è –Ω–æ—á—å', '–ü—Ä–∏–≤–µ—Ç –≥–ª—É–±–æ–∫–æ–π –Ω–æ—á—å—é', '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏'])
        icon = 'üåÉ'
    return (f"{greet} –≤ {inflect_city(city, {'loct'})}" if with_city else greet), icon


async def send_notifies():
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á–µ—Ä–µ–∑ AsyncIOScheduler –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.
    """

    users = await db.get_users()
    now = datetime.now().time()
    for user in users:
        for nt in user.notify_time:
            if user.geo and (nt.hour, nt.minute) == (now.hour + user.state.get('tz_shift'), now.minute):
                weather, sun_status = await get_weather(user.geo)
                context = {'adverb': '–°–µ–≥–æ–¥–Ω—è', 'verb': '–±—É–¥–µ—Ç ', 'feels_verb': '–æ—â—É—â–∞–µ—Ç—Å—è'}
                text = FORECAST.format(**({'city': inflect_city(user.state['city'], {'loct'})} | weather | context))
                sun_status_verbs = {'verb_sr': '–±—ã–ª' if datetime.now().time() > sun_status['sunrise'] else '–±—É–¥–µ—Ç',
                                    'verb_ss': '–±—ã–ª' if datetime.now().time() > sun_status['sunset'] else '–±—É–¥–µ—Ç'}
                text += '\n\n' + SUN_DESC.format(**(sun_status | sun_status_verbs))
                board = Board([[Button(text='–°–ø–∞—Å–∏–±–æ ü´Ç', callback_data='ok')]]).as_markup()
                await bot.send_message(user.tg_id, f'{"! ".join(await get_greeting(user.tg_id, False))}\n\n{text}',
                                       reply_markup=board)
