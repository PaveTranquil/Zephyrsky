from contextlib import suppress
from datetime import datetime, timedelta
from random import choice
from typing import Iterable

from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message
from aiohttp import ClientSession
from pymorphy2.shapes import restore_capitalization

from loader import ADMINS, bot, db, get, morph, storage


class AdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π—Å—è –æ—Ç aiogram.filters.BaseFilter –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""

    async def __call__(self, resp: Message | CallbackQuery) -> bool:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–æ—É—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

        :param resp: –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ `Message` –∏–ª–∏ `CallbackQuery`.
        :type resp: Union[aiogram.types.Message, aiogram.types.CallbackQuery]

        :return: –ë—É–ª–µ–≤–æ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–≤—à–∏–π resp.
        :rtype: bool
        """
        return await (resp.chat.id if isinstance(resp, Message) else resp.message.chat.id) in ADMINS


async def set_state(ctx: FSMContext, state: State):
    await ctx.set_state(state)
    await db.set_state(ctx.key.chat_id, 'aiogram_state', str(state).split("'")[1])


async def delete_state(ctx: FSMContext):
    await ctx.clear()
    for key in ['aiogram_state', 'main_msg_id', 'from']:
        try:
            await db.delete_state(ctx.key.chat_id, key)
        except (ValueError, KeyError):
            pass


async def restore_states():
    users = await db.get_users()
    for user in users:
        if state := user.state.get('aiogram_state'):
            await storage.set_state(bot, StorageKey(bot.id, user.tg_id, user.tg_id), state)


async def notify_admins(text: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º `text` –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ `ADMINS`.
    –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç `TelegramBadRequest`, —Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∞–≤–ª—è–µ—Ç—Å—è –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.

    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    :type text: str
    """
    for admin in ADMINS:
        with suppress(TelegramBadRequest):
            await bot.send_message(admin, text)


def degress_to_side(deg: float) -> str:
    if 338 <= deg <= 360 or 0 <= deg <= 22:
        return '—Å–µ–≤–µ—Ä–Ω—ã–π'
    elif 22 <= deg <= 67:
        return '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 67 <= deg <= 112:
        return '–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 112 <= deg <= 157:
        return '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 157 <= deg <= 202:
        return '—é–∂–Ω—ã–π'
    elif 202 <= deg <= 247:
        return '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
    elif 247 <= deg <= 292:
        return '–∑–∞–ø–∞–¥–Ω—ã–π'
    elif 292 <= deg <= 337:
        return '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'


def convert_to_icon(id_: int) -> str:
    match id_ // 100:
        case 2:
            return '‚õàÔ∏è'
        case 3:
            return 'üå¶Ô∏è'
        case 5:
            return 'üåßÔ∏è'
        case 6:
            return 'üå®Ô∏è'
        case 7:
            match id_ % 100 // 10:
                case 3 | 5 | 6:
                    return 'üí®'
                case _:
                    return 'üå´Ô∏è'
    match id_ % 10:
        case 0:
            return '‚òÄÔ∏è'
        case 1:
            return 'üå§Ô∏è'
        case 2:
            return '‚õÖ'
        case 3 | 4:
            return 'üå•Ô∏è'


async def get_weather(geo: list[float]) -> list:
    async with ClientSession() as session:
        params = {'lon': geo[0], 'lat': geo[1], 'units': 'metric', 'lang': 'ru', 'appid': get('APIKEY_WEATHER')}
        async with session.get('https://api.openweathermap.org/data/2.5/weather', params=params) as resp:
            r_dict = await resp.json()
            if resp.status == 200:
                if r_dict['cod'] == 200:
                    return [r_dict['weather'][0]['id'], r_dict['weather'][0]['description'], r_dict['main']['temp'],
                            r_dict['main']['feels_like'], round(r_dict['main']['pressure'] * 0.750064, 2),
                            r_dict['main']['humidity'], degress_to_side(r_dict['wind']['deg']), r_dict['wind']['speed'],
                            r_dict['clouds']['all']]
                raise ValueError
            raise ConnectionError


async def reverse_geocoding(geo: list[float]) -> str:
    """
    –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å–∞.

    :param geo: –°–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    :type geo: list[float]

    :return: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑ –≥–µ–æ–∫–æ–¥–∞.
    :rtype: str

    :raises ValueError: –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    :raises ConnectionError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å–∞.
    """

    async with ClientSession() as session:
        # params = {'format': 'jsonv2', 'lon': geo[0], 'lat': geo[1]}
        # async with session.get('https://nominatim.openstreetmap.org/reverse', params=params) as resp:
        params = {'geocode': f'{geo[0]}, {geo[1]}', 'kind': 'locality',
                  'apikey': get('APIKEY_GEOCODE'), 'format': 'json'}
        async with session.get('https://geocode-maps.yandex.ru/1.x', params=params) as resp:
            resp_dict = await resp.json()
            if resp.status == 200:
                if resp_dict['response']['GeoObjectCollection']['featureMember']:
                    return resp_dict['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['name']
                raise ValueError
            raise ConnectionError


async def geocoding(city: str) -> tuple[tuple[float], str]:
    """
    –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ—Ç –≥–æ—Ä–æ–¥ –≤ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å–∞.

    :param city: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    :type city: str

    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑ –≥–µ–æ–∫–æ–¥–∞.
    :rtype: tuple[tuple[float], str]

    :raises ValueError: –ï—Å–ª–∏ –≥–µ–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    :raises ConnectionError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å–∞.
    """

    async with ClientSession() as session:
        params = {'geocode': city, 'apikey': get('APIKEY_GEOCODE'), 'format': 'json'}
        async with session.get('https://geocode-maps.yandex.ru/1.x', params=params) as resp:
            resp_dict = await resp.json()
            if resp.status == 200:
                if resp_dict['response']['GeoObjectCollection']['featureMember']:
                    geo = resp_dict['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
                    return (
                        tuple(map(float, geo.split())),
                        resp_dict['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['name']
                    )
                raise ValueError
            raise ConnectionError


async def get_tzshift(geo: list[float]) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API TimeZoneDB.

    :param geo: –°–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    :type geo: list[float]

    :return: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ —Å–¥–≤–∏–≥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —á–∞—Å–∞—Ö.
    :rtype: int

    :raises ValueError: –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.
    :raises ConnectionError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API TimeZoneDB.
    """

    async with ClientSession() as session:
        params = {'key': get('APIKEY_TIMEZONE'), 'format': 'json', 'by': 'position', 'lng': geo[0], 'lat': geo[1]}
        async with session.get('http://api.timezonedb.com/v2.1/get-time-zone', params=params) as resp:
            resp_dict = await resp.json()
            if resp.status == 200:
                if resp_dict['status'] == 'OK':
                    return resp_dict['gmtOffset'] // 3600 - 3
                raise ValueError
            raise ConnectionError


def inflect_city(text: str, required_grammemes: Iterable[str]) -> str:
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≥—Ä–∞–º–º–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ
    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω—ã, –∏ –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
    –≥—Ä–∞–º–º–µ–º —Å –ø–æ–º–æ—â—å—é pymorphy2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é
    pymorphy2.shapes.restore_capitalization(), –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç–æ–∫–µ–Ω—ã —Å–Ω–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞ –≤—ã—Ö–æ–¥.

    :param text: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    :type text: str
    :param required_grammemes: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≥—Ä–∞–º–º–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏.
    :type required_grammemes: Iterable[str]

    :return: –°–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞–º–º–µ–º–∞–º–∏.
    :rtype: str
    """

    tokens = text.split()
    inflected = [
        restore_capitalization(
            morph.parse(tok)[0].inflect(required_grammemes).word,
            tok
        )
        for tok in tokens
    ]
    return " ".join(inflected)


async def get_greeting(uid: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.

    :param uid: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –∑–∞–ø–∏—Å–∞–Ω.
    :type uid: int

    :return: –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–æ—Ä–æ–¥–µ.
    :rtype: str
    """

    user = await db.get_user(uid)
    if (tz_shift := user.state.get('tz_shift')) is None:
        return choice(['–ü—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç–∏–∫', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–•–µ–ª–ª–æ—É', '–•–∞–π', '–ô–æ—É', '–°–∞–ª—é—Ç'])
    local_time, city = (datetime.now() + timedelta(hours=tz_shift)).time(), user.state.get('city')

    if 5 <= local_time.hour <= 11:
        greet = choice(['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ', '–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞', '–£—Ç—Ä–µ—á–∫–æ', '–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ',
                       '–î–æ–±—Ä–µ–π—à–µ–µ —É—Ç—Ä–æ', '–î–æ–±—Ä–µ–π—à–µ–≥–æ —É—Ç—Ä–∞', '–î–æ–±—Ä–µ–π—à–µ–µ —É—Ç—Ä–µ—á–∫–æ', '–î–æ–±—Ä–µ–π—à–µ–≥–æ —É—Ç—Ä–µ—á–∫–∞'])
    elif 12 <= local_time.hour <= 16:
        greet = choice(['–î–æ–±—Ä—ã–π –¥–µ–Ω—å', '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è', '–î–æ–±—Ä—ã–π –¥–µ–Ω—ë–∫', '–î–æ–±—Ä–æ–≥–æ –¥–µ–Ω—å–∫–∞', '–î–µ–Ω—å –¥–æ–±—Ä—ã–π',
                       '–î–æ–±—Ä–µ–π—à–∏–π –¥–µ–Ω—å', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –¥–Ω—è', '–î–æ–±—Ä–µ–π—à–∏–π –¥–µ–Ω—ë–∫', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –¥–µ–Ω—å–∫–∞'])
    elif 17 <= local_time.hour <= 22:
        greet = choice(['–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞', '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä–æ–∫', '–î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∫–∞', '–í–µ—á–µ—Ä –¥–æ–±—Ä—ã–π',
                       '–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –≤–µ—á–µ—Ä–∞', '–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä–æ–∫', '–î–æ–±—Ä–µ–π—à–µ–≥–æ –≤–µ—á–µ—Ä–∫–∞'])
    else:
        greet = choice(['–î–æ–±—Ä–æ–π –Ω–æ—á–∏', '–°–ø–æ–∫–æ–π–Ω–∞—è –Ω–æ—á—å', '–ü—Ä–∏–≤–µ—Ç –≥–ª—É–±–æ–∫–æ–π –Ω–æ—á—å—é', '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏'])
    return ' '.join([greet, '–≤ ' + inflect_city(city, {'loct'})])


async def send_notifies():
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á–µ—Ä–µ–∑ AsyncIOScheduler –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.
    """

    users = await db.get_users()
    now = datetime.now().time()
    for user in users:
        for nt in user.notify_time:
            if (nt.hour, nt.minute) == (now.hour, now.minute):
                ...  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π
                # await bot.send_message(user.tg_id, ...)
